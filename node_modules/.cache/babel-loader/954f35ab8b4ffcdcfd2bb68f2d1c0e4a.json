{"ast":null,"code":"import _classCallCheck from \"/Users/kle1/progs/React/QueryBuilder2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kle1/progs/React/QueryBuilder2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kle1/progs/React/QueryBuilder2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kle1/progs/React/QueryBuilder2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kle1/progs/React/QueryBuilder2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kle1/progs/React/QueryBuilder2/src/Output.jsx\";\nimport React, { Component } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport ResultsButtons from './ResultsButtons';\n\nvar Output =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Output, _Component);\n\n  function Output(props) {\n    var _this;\n\n    _classCallCheck(this, Output);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Output).call(this, props));\n\n    _this.handleParamsChange = function (event) {\n      _this.setState({\n        input_params_string: event.target.value,\n        results: ''\n      });\n\n      _this.props.changedInput(event.target.value);\n    };\n\n    _this.handleSubmit = function () {\n      _this.setState({\n        results: \"Submitting request ...\",\n        isCsv: _this.props.input_params.output === 'csv',\n        dataimage: \"\"\n      });\n\n      var url = _this.props.acisServer + _this.props.generalArea;\n\n      if (_this.props.input_params.output !== \"image\") {\n        fetch(url, {\n          method: 'POST',\n          body: _this.state.input_params_string,\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).then(function (response) {\n          return response.ok && !_this.state.isCsv ? response.json() : response.text();\n        }).then(function (data) {\n          return _this.setState({\n            results: typeof data === 'object' ? JSON.stringify(data, null, 0) : data,\n            results_json: data,\n            format: typeof data === 'string' ? \"pre\" : \"normal\",\n            selectedButton: typeof data === 'object' ? \"JSON\" : \"\"\n          });\n        }).catch(function (error) {\n          return _this.setState({\n            results: 'Error: ' + error.message\n          });\n        });\n      } else {\n        _this.setState({\n          results: \"image\",\n          results_json: '',\n          format: 'normal',\n          dataimage: url + '?params=' + _this.state.input_params_string,\n          selectedButton: ''\n        });\n      }\n    };\n\n    _this.basicFormat = function (results_json) {\n      var results_string = \"\";\n      var dataimage = \"\";\n      Object.keys(results_json).forEach(function (key) {\n        if (key === 'data' && results_json[key].includes(\"image/png;base64\")) {\n          dataimage = results_json[key];\n        } else if (Array.isArray(results_json[key])) {\n          results_string += key + \":\\n\";\n          results_json[key].forEach(function (item) {\n            results_string += \" \" + JSON.stringify(item) + \"\\n\";\n          });\n        } else {\n          results_string += key + \":\\n\";\n          results_string += \" \" + JSON.stringify(results_json[key]) + \"\\n\";\n        }\n      });\n      return {\n        results_string: results_string,\n        dataimage: dataimage\n      };\n    };\n\n    _this.handleFormat = function (results_button) {\n      _this.setState({\n        selectedButton: results_button\n      });\n\n      if (results_button === \"Basic format\") {\n        var basicFormatResults = _this.basicFormat(_this.state.results_json);\n\n        _this.setState({\n          results: basicFormatResults.results_string,\n          format: \"pre-wrap\",\n          dataimage: basicFormatResults.dataimage.length > 0 ? basicFormatResults.dataimage : ''\n        });\n      } else if (results_button === \"JSON\") {\n        _this.setState({\n          results: JSON.stringify(_this.state.results_json, null, 0),\n          format: \"normal\",\n          dataimage: \"\"\n        });\n      } else if (results_button === \"Full format\") {\n        var hasImage = _this.state.results_json.hasOwnProperty(\"data\") && _this.state.results_json.data.includes(\"image/png;base64\");\n\n        _this.setState({\n          results: JSON.stringify(_this.state.results_json, null, 2),\n          format: \"pre-wrap\",\n          dataimage: hasImage ? _this.state.results_json.data : ''\n        });\n      } else {\n        console.log('Error: unknown format button');\n      }\n    };\n\n    _this.state = {\n      input_params_string: \"\",\n      results: \"\",\n      results_json: {},\n      format: \"normal\",\n      isCsv: false,\n      selectedButton: \"JSON\",\n      dataimage: \"\"\n    };\n    return _this;\n  } // user changed parameter string\n\n\n  _createClass(Output, [{\n    key: \"componentDidMount\",\n    // JSON parameters object needs to be stringified for display in text box\n    value: function componentDidMount() {\n      if (Object.keys(this.props.input_params).length > 0) {\n        if (this.props.input_params.hasOwnProperty(\"elems\") && this.props.input_params.elems.includes(\"{\")) {\n          this.props.input_params.elems = JSON.parse(this.props.input_params.elems);\n        }\n\n        this.setState({\n          input_params_string: JSON.stringify(this.props.input_params)\n        });\n      }\n    } // JSON parameters object needs to be stringified for display in text box\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.input_params !== prevProps.input_params) {\n        if (this.props.input_params.hasOwnProperty(\"elems\") && this.props.input_params.elems.includes(\"{\")) {\n          this.props.input_params.elems = JSON.parse(this.props.input_params.elems);\n        } // empty bbox has to be converted from string to empty array in parameters string\n\n\n        if (this.props.input_params.hasOwnProperty('bbox') && this.props.input_params.bbox === \"[]\") {\n          this.props.input_params.bbox = [];\n        }\n\n        this.setState({\n          input_params_string: JSON.stringify(this.props.input_params)\n        });\n\n        if (Object.keys(this.props.input_params).length === 0) {\n          this.setState({\n            results: ''\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Paper, {\n        elevation: 0,\n        style: {\n          marginTop: \"1em\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \"Parameters (JSON)\", this.state.input_params_string.length > 2 && React.createElement(Button, {\n        variant: \"contained\",\n        size: \"small\",\n        style: {\n          marginLeft: \"3em\",\n          backgroundColor: \"limegreen\"\n        },\n        onMouseDown: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"Submit\")), React.createElement(TextField, {\n        id: \"params\",\n        value: this.state.input_params_string,\n        margin: \"dense\",\n        variant: \"outlined\",\n        multiline: true,\n        fullWidth: true,\n        inputProps: {\n          style: {\n            fontFamily: \"Arial, Helvetica, sans-serif\",\n            fontSize: \"95%\"\n          }\n        },\n        onChange: this.handleParamsChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }), this.state.results.length > 0 && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, this.state.results !== \"image\" && React.createElement(ResultsButtons, {\n        handleFormat: this.handleFormat,\n        showButtons: !this.state.isCsv,\n        selectedButton: this.state.selectedButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }), React.createElement(Paper, {\n        elevation: 0,\n        style: {\n          border: \"1px solid lightgray\",\n          margin: \"0\",\n          padding: \"5px\",\n          fontFamily: \"Arial, Helvetica, sans-serif\",\n          fontSize: \"95%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, this.state.dataimage.length > 0 && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(\"pre\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, this.state.dataimage.includes(\"http\") ? \"Returned image\" : \"data (as image)\"), React.createElement(\"img\", {\n        src: this.state.dataimage,\n        alt: \"map\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      })), !this.state.dataimage.includes(\"http\") && React.createElement(\"pre\", {\n        style: {\n          whiteSpace: this.state.format,\n          wordBreak: \"break-word\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, this.state.results))));\n    }\n  }]);\n\n  return Output;\n}(Component);\n\nexport { Output as default };","map":{"version":3,"sources":["/Users/kle1/progs/React/QueryBuilder2/src/Output.jsx"],"names":["React","Component","Typography","Button","TextField","Paper","ResultsButtons","Output","props","handleParamsChange","event","setState","input_params_string","target","value","results","changedInput","handleSubmit","isCsv","input_params","output","dataimage","url","acisServer","generalArea","fetch","method","body","state","headers","then","response","ok","json","text","data","JSON","stringify","results_json","format","selectedButton","catch","error","message","basicFormat","results_string","Object","keys","forEach","key","includes","Array","isArray","item","handleFormat","results_button","basicFormatResults","length","hasImage","hasOwnProperty","console","log","elems","parse","prevProps","bbox","marginTop","marginLeft","backgroundColor","style","fontFamily","fontSize","border","margin","padding","whiteSpace","wordBreak"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Paper from '@material-ui/core/Paper'\nimport ResultsButtons from './ResultsButtons'\n\nexport default class Output extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      input_params_string: \"\",\n      results: \"\",\n      results_json: {},\n      format: \"normal\",\n      isCsv: false,\n      selectedButton: \"JSON\",\n      dataimage: \"\"\n    }\n  }\n\n  // user changed parameter string\n  handleParamsChange = event => {\n    this.setState({\n      input_params_string: event.target.value,\n      results: '',\n    })\n    this.props.changedInput(event.target.value)\n  }  \n\n  // submit parameter string to server\n  handleSubmit = () => {\n    this.setState({\n      results: \"Submitting request ...\", \n      isCsv: this.props.input_params.output === 'csv', \n      dataimage: \"\"\n    })\n    const url = this.props.acisServer + this.props.generalArea\n    if (this.props.input_params.output !== \"image\") {\n      fetch(url, {\n        method: 'POST',\n        body: this.state.input_params_string,\n        headers: {'Content-Type': 'application/json'}\n      })\n        .then(response => response.ok && !this.state.isCsv ? response.json() : response.text())\n        .then(data => this.setState({\n          results: typeof data === 'object' ? JSON.stringify(data,null,0) : data,\n          results_json: data,\n          format: typeof data === 'string' ? \"pre\" : \"normal\",\n          selectedButton: typeof data === 'object' ? \"JSON\" : \"\"\n        }))\n        .catch(error => this.setState({\n          results: 'Error: ' + error.message\n        }))\n    } else {\n      this.setState({\n        results: \"image\",\n        results_json: '',\n        format: 'normal',\n        dataimage: url + '?params=' + this.state.input_params_string, \n        selectedButton: ''\n       })\n    }\n  }\n\n  basicFormat = (results_json) => {\n    let results_string = \"\"\n    let dataimage = \"\"\n    Object.keys(results_json).forEach(key => {\n      if (key === 'data' && results_json[key].includes(\"image/png;base64\")) {\n        dataimage =results_json[key]\n      } else if (Array.isArray(results_json[key])) {\n        results_string += key + \":\\n\"\n        results_json[key].forEach(item => {\n          results_string += \" \" + JSON.stringify(item) + \"\\n\"\n        }) \n      } else {\n        results_string += key + \":\\n\"\n        results_string += \" \" + JSON.stringify(results_json[key]) + \"\\n\"\n      }\n    })\n    return {results_string: results_string, dataimage: dataimage}\n  }\n\n  // user clicked one of the format buttons\n  handleFormat = (results_button) => {\n    this.setState({\n      selectedButton: results_button\n    })\n    if (results_button === \"Basic format\") {\n      const basicFormatResults = this.basicFormat(this.state.results_json)\n      this.setState({\n        results: basicFormatResults.results_string,\n        format:\"pre-wrap\", \n        dataimage: basicFormatResults.dataimage.length > 0 ? basicFormatResults.dataimage : '',\n      })\n    } else if (results_button === \"JSON\") {\n      this.setState({\n        results: JSON.stringify(this.state.results_json,null,0), \n        format:\"normal\", \n        dataimage: \"\",\n      })\n    } else if (results_button === \"Full format\") {\n      const hasImage = this.state.results_json.hasOwnProperty(\"data\") && this.state.results_json.data.includes(\"image/png;base64\")\n      this.setState({\n        results: JSON.stringify(this.state.results_json,null,2), \n        format: \"pre-wrap\", \n        dataimage: hasImage ? this.state.results_json.data : ''\n      })\n    } else {\n      console.log('Error: unknown format button')\n    }\n  }\n\n  // JSON parameters object needs to be stringified for display in text box\n  componentDidMount() {\n    if (Object.keys(this.props.input_params).length > 0) {\n      if (this.props.input_params.hasOwnProperty(\"elems\") && this.props.input_params.elems.includes(\"{\")) {\n        this.props.input_params.elems = JSON.parse(this.props.input_params.elems)\n      }\n      this.setState({input_params_string: JSON.stringify(this.props.input_params)})\n    }\n  }\n\n  // JSON parameters object needs to be stringified for display in text box\n  componentDidUpdate(prevProps) {\n    if (this.props.input_params !== prevProps.input_params) {\n      if (this.props.input_params.hasOwnProperty(\"elems\") && this.props.input_params.elems.includes(\"{\")) {\n        this.props.input_params.elems = JSON.parse(this.props.input_params.elems)\n      }\n      // empty bbox has to be converted from string to empty array in parameters string\n      if (this.props.input_params.hasOwnProperty('bbox') && this.props.input_params.bbox === \"[]\") {\n        this.props.input_params.bbox = []\n      }\n      this.setState({input_params_string: JSON.stringify(this.props.input_params)})\n      if (Object.keys(this.props.input_params).length === 0) {\n        this.setState({results:''})\n      }\n    }\n  }\n\n  render() {\n    return (\n      <Paper elevation={0} style={{marginTop:\"1em\"}}>\n        <Typography variant=\"h6\">\n          Parameters (JSON)\n          {this.state.input_params_string.length > 2 &&\n            <Button \n              variant=\"contained\"\n              size=\"small\"\n              style={{marginLeft:\"3em\", backgroundColor:\"limegreen\"}}\n              onMouseDown={this.handleSubmit}\n            >\n              Submit\n            </Button>\n          }\n        </Typography>\n        <TextField\n          id=\"params\"\n          value={this.state.input_params_string}\n          margin=\"dense\"\n          variant=\"outlined\"\n          multiline={true}\n          fullWidth={true}\n          inputProps={{style:{fontFamily:\"Arial, Helvetica, sans-serif\", fontSize:\"95%\"}}}\n          onChange={this.handleParamsChange}\n        />\n\n        {this.state.results.length > 0 && \n          <div>\n            {this.state.results !== \"image\" &&\n              <ResultsButtons\n                handleFormat={this.handleFormat}\n                showButtons={!this.state.isCsv}\n                selectedButton={this.state.selectedButton}\n              />\n            }\n            <Paper \n              elevation={0} \n              style={{\n                border:\"1px solid lightgray\", \n                margin:\"0\", \n                padding:\"5px\", \n                fontFamily:\"Arial, Helvetica, sans-serif\", \n                fontSize:\"95%\"\n              }}\n            >\n              {this.state.dataimage.length > 0 &&\n                <div>\n                  <pre>\n                    {this.state.dataimage.includes(\"http\") ? \"Returned image\" : \"data (as image)\"}\n                  </pre>\n                  <img src={this.state.dataimage} alt=\"map\" />\n                </div>\n              }\n              {!this.state.dataimage.includes(\"http\") &&\n                <pre style={{whiteSpace:this.state.format, wordBreak:\"break-word\"}}>\n                  {this.state.results}\n                </pre>\n              }\n            </Paper>\n          </div>\n        }\n      </Paper>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}