{"ast":null,"code":"import _classCallCheck from \"/Users/kle1/progs/React/QueryBuilder3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kle1/progs/React/QueryBuilder3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kle1/progs/React/QueryBuilder3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kle1/progs/React/QueryBuilder3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kle1/progs/React/QueryBuilder3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kle1/progs/React/QueryBuilder3/src/ResultsButtons.jsx\";\nimport React, { Component } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport { withStyles } from '@material-ui/core/styles';\nvar styles = {\n  // ToggleButton\n  root: {\n    background: \"white\",\n    color: \"darkblue\",\n    textTransform: \"none\",\n    borderRight: \"1pt solid lightgray\"\n  },\n  selected: {\n    background: \"blue !important\",\n    color: \"white !important\"\n  },\n  // Paper\n  paperRoot: {\n    margin: \"1em 0\"\n  }\n};\nvar buttonLabels = ['JSON', 'Basic format', 'Full format'];\n\nvar ResultsButtons =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ResultsButtons, _Component);\n\n  function ResultsButtons(props) {\n    var _this;\n\n    _classCallCheck(this, ResultsButtons);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ResultsButtons).call(this, props));\n\n    _this.handleChange = function (event) {\n      var value = event.currentTarget.value;\n\n      _this.setState({\n        selectedButton: value\n      });\n\n      _this.props.handleFormat(value);\n    };\n\n    _this.state = {\n      selectedButton: \"JSON\"\n    };\n    return _this;\n  }\n\n  _createClass(ResultsButtons, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        selectedButton: this.props.selectedButton\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props !== prevProps) {\n        this.setState({\n          selectedButton: this.props.selectedButton\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var classes = this.props.classes;\n      return React.createElement(Paper, {\n        elevation: 0,\n        classes: {\n          root: classes.paperRoot\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        spacing: 16,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Results:\")), React.createElement(Grid, {\n        item: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, this.props.showButtons && React.createElement(ToggleButtonGroup, {\n        value: this.state.selectedButton,\n        exclusive: true,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, buttonLabels.map(function (item) {\n        return React.createElement(ToggleButton, {\n          key: item,\n          value: item,\n          classes: {\n            root: classes.root,\n            selected: classes.selected\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, item);\n      })))));\n    }\n  }]);\n\n  return ResultsButtons;\n}(Component);\n\nexport default withStyles(styles)(ResultsButtons);","map":{"version":3,"sources":["/Users/kle1/progs/React/QueryBuilder3/src/ResultsButtons.jsx"],"names":["React","Component","Paper","Grid","Typography","ToggleButton","ToggleButtonGroup","withStyles","styles","root","background","color","textTransform","borderRight","selected","paperRoot","margin","buttonLabels","ResultsButtons","props","handleChange","event","value","currentTarget","setState","selectedButton","handleFormat","state","prevProps","classes","showButtons","map","item"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport ToggleButton from '@material-ui/lab/ToggleButton'\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup'\nimport { withStyles } from '@material-ui/core/styles'\n\nconst styles = {\n   // ToggleButton\n   root: {\n    background: \"white\",\n    color: \"darkblue\",\n    textTransform: \"none\",\n    borderRight: \"1pt solid lightgray\"\n  },\n  selected: {\n    background: \"blue !important\",\n    color: \"white !important\"\n  },\n  // Paper\n  paperRoot: {\n    margin: \"1em 0\",\n  }\n}\n\nconst buttonLabels = ['JSON', 'Basic format', 'Full format']\n\nclass ResultsButtons extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      selectedButton: \"JSON\",\n    }\n  }\n\n  handleChange = (event) => {\n    const value = event.currentTarget.value\n    this.setState({ \n      selectedButton: value\n    })\n    this.props.handleFormat(value)\n  }\n\n  componentDidMount() {\n    this.setState({selectedButton: this.props.selectedButton})\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props !== prevProps) {\n      this.setState({\n        selectedButton: this.props.selectedButton\n      })\n    }\n  }\n\n  render() {\n    const {classes} = this.props\n    return (\n      <Paper elevation={0} classes={{root:classes.paperRoot}}>\n        <Grid container spacing={16}>\n          <Grid item>\n            <Typography variant=\"h6\">\n              Results:\n            </Typography>\n          </Grid>\n          <Grid item>\n            {this.props.showButtons &&\n              <ToggleButtonGroup value={this.state.selectedButton} exclusive onChange={this.handleChange}>\n                  {buttonLabels.map((item) => (\n                    <ToggleButton \n                      key={item} \n                      value={item} \n                      classes={{root:classes.root, selected:classes.selected}}\n                    >\n                      {item}\n                    </ToggleButton>                  \n                  ))}\n              </ToggleButtonGroup>\n            }\n          </Grid>\n        </Grid>\n      </Paper>\n    )\n  }\n}\n\nexport default withStyles(styles)(ResultsButtons)"]},"metadata":{},"sourceType":"module"}