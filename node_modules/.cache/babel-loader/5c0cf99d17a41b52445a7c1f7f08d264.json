{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.styles = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _withStyles = _interopRequireDefault(require(\"@material-ui/core/styles/withStyles\"));\n\nvar _hasValue = _interopRequireDefault(require(\"./hasValue\"));\n\nvar _isValueSelected = _interopRequireDefault(require(\"./isValueSelected\"));\n\nvar styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      transition: theme.transitions.create('background,box-shadow'),\n      background: 'transparent',\n      borderRadius: 2,\n      overflow: 'hidden'\n    },\n\n    /* Styles applied to the root element if `selected={true}` or `selected=\"auto\" and `value` set. */\n    selected: {\n      background: theme.palette.background.paper,\n      boxShadow: theme.shadows[2]\n    }\n  };\n};\n\nexports.styles = styles;\n\nvar ToggleButtonGroup =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(ToggleButtonGroup, _React$Component);\n\n  function ToggleButtonGroup() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ToggleButtonGroup);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ToggleButtonGroup)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleChange = function (event, buttonValue) {\n      var _this$props = _this.props,\n          onChange = _this$props.onChange,\n          value = _this$props.value;\n\n      if (!onChange) {\n        return;\n      }\n\n      var index = value && value.indexOf(buttonValue);\n      var newValue;\n\n      if (value && index >= 0) {\n        newValue = (0, _toConsumableArray2.default)(value);\n        newValue.splice(index, 1);\n      } else {\n        newValue = value ? [].concat((0, _toConsumableArray2.default)(value), [buttonValue]) : [buttonValue];\n      }\n\n      onChange(event, newValue);\n    };\n\n    _this.handleExclusiveChange = function (event, buttonValue) {\n      var _this$props2 = _this.props,\n          onChange = _this$props2.onChange,\n          value = _this$props2.value;\n\n      if (!onChange) {\n        return;\n      }\n\n      onChange(event, value === buttonValue ? null : buttonValue);\n    };\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(ToggleButtonGroup, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          childrenProp = _this$props3.children,\n          classNameProp = _this$props3.className,\n          classes = _this$props3.classes,\n          exclusive = _this$props3.exclusive,\n          onChange = _this$props3.onChange,\n          selectedProp = _this$props3.selected,\n          value = _this$props3.value,\n          other = (0, _objectWithoutProperties2.default)(_this$props3, [\"children\", \"className\", \"classes\", \"exclusive\", \"onChange\", \"selected\", \"value\"]);\n\n      var children = _react.default.Children.map(childrenProp, function (child) {\n        if (!_react.default.isValidElement(child)) {\n          return null;\n        }\n\n        var _child$props = child.props,\n            buttonSelected = _child$props.selected,\n            buttonValue = _child$props.value;\n        var selected = buttonSelected === undefined ? (0, _isValueSelected.default)(buttonValue, value) : buttonSelected;\n        return _react.default.cloneElement(child, {\n          selected: selected,\n          onChange: exclusive ? _this2.handleExclusiveChange : _this2.handleChange\n        });\n      });\n\n      var groupSelected = selectedProp === 'auto' ? (0, _hasValue.default)(value) : selectedProp;\n      var className = (0, _classnames.default)(classes.root, (0, _defineProperty2.default)({}, classes.selected, groupSelected), classNameProp);\n      return _react.default.createElement(\"div\", (0, _extends2.default)({\n        className: className\n      }, other), children);\n    }\n  }]);\n  return ToggleButtonGroup;\n}(_react.default.Component);\n\nprocess.env.NODE_ENV !== \"production\" ? ToggleButtonGroup.propTypes = {\n  /**\r\n   * The content of the button.\r\n   */\n  children: _propTypes.default.node.isRequired,\n\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css-api) below for more details.\r\n   */\n  classes: _propTypes.default.object.isRequired,\n\n  /**\r\n   * @ignore\r\n   */\n  className: _propTypes.default.string,\n\n  /**\r\n   * If `true`, only allow one of the child ToggleButton values to be selected.\r\n   */\n  exclusive: _propTypes.default.bool,\n\n  /**\r\n   * Callback fired when the value changes.\r\n   *\r\n   * @param {object} event The event source of the callback\r\n   * @param {object} value of the selected buttons. When `exclusive` is true\r\n   * this is a single value; when false an array of selected values. If no value\r\n   * is selected and `exclusive` is true the value is null; when false an empty array.\r\n   */\n  onChange: _propTypes.default.func,\n\n  /**\r\n   * If `true`, render the group in a selected state. If `auto` (the default)\r\n   * render in a selected state if `value` is not empty.\r\n   */\n  selected: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['auto'])]),\n\n  /**\r\n   * The currently selected value within the group or an array of selected\r\n   * values when `exclusive` is false.\r\n   */\n  value: _propTypes.default.any\n} : void 0;\nToggleButtonGroup.defaultProps = {\n  exclusive: false,\n  selected: 'auto'\n};\n\nvar _default = (0, _withStyles.default)(styles, {\n  name: 'MuiToggleButtonGroup'\n})(ToggleButtonGroup);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}