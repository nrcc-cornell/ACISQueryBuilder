{"ast":null,"code":"'use strict';\n\nrequire('./es6.regexp.exec');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar wks = require('./_wks');\nvar regexpExec = require('./_regexp-exec');\nvar SPECIES = wks('species');\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  // #replace needs built-in support for named groups.\n  // #match works fine because it just return the exec results, even if it has\n  // a \"grops\" property.\n  var re = /./;\n  re.exec = function () {\n    var result = [];\n    result.groups = {\n      a: '7'\n    };\n    return result;\n  };\n  return ''.replace(re, '$<a>') !== '7';\n});\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = function () {\n  // Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () {\n    return originalExec.apply(this, arguments);\n  };\n  var result = 'ab'.split(re);\n  return result.length === 2 && result[0] === 'a' && result[1] === 'b';\n}();\nmodule.exports = function (KEY, length, exec) {\n  var SYMBOL = wks(KEY);\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () {\n      return 7;\n    };\n    return ''[KEY](O) != 7;\n  });\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n    re.exec = function () {\n      execCalled = true;\n      return null;\n    };\n    if (KEY === 'split') {\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () {\n        return re;\n      };\n    }\n    re[SYMBOL]('');\n    return !execCalled;\n  }) : undefined;\n  if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS || KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {\n    var nativeRegExpMethod = /./[SYMBOL];\n    var fns = exec(defined, SYMBOL, ''[KEY], function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {\n      if (regexp.exec === regexpExec) {\n        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n          // The native String method already delegates to @@method (this\n          // polyfilled function), leasing to infinite recursion.\n          // We avoid it by directly calling the native @@method method.\n          return {\n            done: true,\n            value: nativeRegExpMethod.call(regexp, str, arg2)\n          };\n        }\n        return {\n          done: true,\n          value: nativeMethod.call(str, regexp, arg2)\n        };\n      }\n      return {\n        done: false\n      };\n    });\n    var strfn = fns[0];\n    var rxfn = fns[1];\n    redefine(String.prototype, KEY, strfn);\n    hide(RegExp.prototype, SYMBOL, length == 2\n    // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n    // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n    ? function (string, arg) {\n      return rxfn.call(string, this, arg);\n    }\n    // 21.2.5.6 RegExp.prototype[@@match](string)\n    // 21.2.5.9 RegExp.prototype[@@search](string)\n    : function (string) {\n      return rxfn.call(string, this);\n    });\n  }\n};","map":{"version":3,"names":["require","redefine","hide","fails","defined","wks","regexpExec","SPECIES","REPLACE_SUPPORTS_NAMED_GROUPS","re","exec","result","groups","a","replace","SPLIT_WORKS_WITH_OVERWRITTEN_EXEC","originalExec","apply","arguments","split","length","module","exports","KEY","SYMBOL","DELEGATES_TO_SYMBOL","O","DELEGATES_TO_EXEC","execCalled","constructor","undefined","nativeRegExpMethod","fns","maybeCallNative","nativeMethod","regexp","str","arg2","forceStringMethod","done","value","call","strfn","rxfn","String","prototype","RegExp","string","arg"],"sources":["/Users/kle1/progs/React/QueryBuilder3/node_modules/core-js/modules/_fix-re-wks.js"],"sourcesContent":["'use strict';\nrequire('./es6.regexp.exec');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar wks = require('./_wks');\nvar regexpExec = require('./_regexp-exec');\n\nvar SPECIES = wks('species');\n\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  // #replace needs built-in support for named groups.\n  // #match works fine because it just return the exec results, even if it has\n  // a \"grops\" property.\n  var re = /./;\n  re.exec = function () {\n    var result = [];\n    result.groups = { a: '7' };\n    return result;\n  };\n  return ''.replace(re, '$<a>') !== '7';\n});\n\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {\n  // Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length === 2 && result[0] === 'a' && result[1] === 'b';\n})();\n\nmodule.exports = function (KEY, length, exec) {\n  var SYMBOL = wks(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n    re.exec = function () { execCalled = true; return null; };\n    if (KEY === 'split') {\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () { return re; };\n    }\n    re[SYMBOL]('');\n    return !execCalled;\n  }) : undefined;\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||\n    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\n  ) {\n    var nativeRegExpMethod = /./[SYMBOL];\n    var fns = exec(\n      defined,\n      SYMBOL,\n      ''[KEY],\n      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {\n        if (regexp.exec === regexpExec) {\n          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n            // The native String method already delegates to @@method (this\n            // polyfilled function), leasing to infinite recursion.\n            // We avoid it by directly calling the native @@method method.\n            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\n          }\n          return { done: true, value: nativeMethod.call(str, regexp, arg2) };\n        }\n        return { done: false };\n      }\n    );\n    var strfn = fns[0];\n    var rxfn = fns[1];\n\n    redefine(String.prototype, KEY, strfn);\n    hide(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return rxfn.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return rxfn.call(string, this); }\n    );\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}