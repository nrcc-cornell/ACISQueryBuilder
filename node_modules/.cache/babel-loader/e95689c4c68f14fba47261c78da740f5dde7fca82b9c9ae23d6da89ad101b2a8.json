{"ast":null,"code":"import _objectSpread from \"/Users/keith/progs/ACISQueryBuilder/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/keith/progs/ACISQueryBuilder/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"/Users/keith/progs/ACISQueryBuilder/src/Output.jsx\",\n  _this = this,\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport ResultsButtons from './ResultsButtons';\nimport CopyToClipboard from './CopyToClipboard';\nimport { basicFormat } from './builders';\nimport { acisServers } from './acisServers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar Output = function Output(props) {\n  _s();\n  var input_params_string = props.input_params_string,\n    setInput_params_string = props.setInput_params_string;\n  var _useState = useState({\n      results: \"\",\n      results_json: {},\n      //format: \"normal\", hard code all whitespace options to pre-wrap, instead of some being \"normal\"\n      dataimage: \"\"\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    datastate = _useState2[0],\n    setDatastate = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    hasParamsError = _useState4[0],\n    setHasParamsError = _useState4[1];\n  var _useState5 = useState(\"JSON\"),\n    _useState6 = _slicedToArray(_useState5, 2),\n    selectedButton = _useState6[0],\n    setSelectedButton = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    isCsv = _useState8[0],\n    setIsCsv = _useState8[1];\n  var getAcisServerUrl = function getAcisServerUrl() {\n    var serverurl = acisServers[props.wstype];\n    var rccindex = serverurl.indexOf('data.rcc-acis');\n    if (rccindex !== -1 && props.server !== 'Any') {\n      serverurl = \"\".concat(serverurl.slice(0, rccindex + 4), \".\").concat(props.server.toLowerCase()).concat(serverurl.slice(rccindex + 4));\n    }\n    return serverurl + props.generalArea;\n  };\n\n  // user changed parameter string\n  var handleParamsChange = function handleParamsChange(event) {\n    setInput_params_string(event.target.value);\n    if (datastate.results.length) {\n      setDatastate(_objectSpread(_objectSpread({}, datastate), {\n        results: ''\n      }));\n    }\n  };\n\n  // submit parameter string to server\n  var handleSubmit = function handleSubmit() {\n    setDatastate(_objectSpread(_objectSpread({}, datastate), {\n      results: \"Submitting request ...\"\n    }));\n    var url = getAcisServerUrl();\n    if (props.input_params.output !== \"image\") {\n      fetch(url, {\n        method: 'POST',\n        body: input_params_string,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(function (response) {\n        return response.ok && !isCsv ? response.json() : response.text();\n      }).then(function (data) {\n        setDatastate(_objectSpread(_objectSpread({}, datastate), {\n          results: typeof data === 'object' ? JSON.stringify(data, null, 0) : data,\n          results_json: data,\n          //format: typeof data === 'string' ? \"pre-wrap\" : \"normal\",\n          dataimage: \"\"\n        }));\n        setSelectedButton(typeof data === 'object' ? \"JSON\" : \"\");\n      }).catch(function (error) {\n        return setDatastate(_objectSpread(_objectSpread({}, datastate), {\n          results: 'Error: ' + error.message,\n          dataimage: \"\"\n        }));\n      });\n    } else {\n      setDatastate(_objectSpread(_objectSpread({}, datastate), {\n        results: \"image\",\n        results_json: '',\n        //format: 'normal',\n        dataimage: url + '?params=' + input_params_string\n      }));\n      setSelectedButton(\"\");\n    }\n  };\n\n  // user clicked one of the format buttons\n  var handleFormat = function handleFormat(results_button) {\n    setSelectedButton(results_button);\n    if (results_button === \"JSON\") {\n      setDatastate(_objectSpread(_objectSpread({}, datastate), {\n        results: JSON.stringify(datastate.results_json, null, 0),\n        //format:\"normal\", \n        dataimage: \"\"\n      }));\n    } else if (results_button === \"Basic format\") {\n      var basicFormatResults = basicFormat(datastate.results_json);\n      setDatastate(_objectSpread(_objectSpread({}, datastate), {\n        results: basicFormatResults.results_string,\n        //format:\"pre-wrap\", \n        dataimage: basicFormatResults.dataimage.length > 0 ? basicFormatResults.dataimage : ''\n      }));\n    } else if (results_button === \"Full format\") {\n      var hasImage = datastate.results_json.hasOwnProperty(\"data\") && datastate.results_json.data.includes(\"image/png;base64\");\n      setDatastate(_objectSpread(_objectSpread({}, datastate), {\n        results: JSON.stringify(datastate.results_json, null, 2),\n        //format: \"pre-wrap\", \n        dataimage: hasImage ? datastate.results_json.data : ''\n      }));\n    } else {\n      console.log('Error: unknown format button');\n    }\n  };\n\n  // JSON parameters object needs to be stringified for display in text box\n  useEffect(function () {\n    //if (Object.keys(props.input_params).length === 0) {\n    setDatastate(_objectSpread(_objectSpread({}, datastate), {\n      results: ''\n    }));\n    //}\n    var newparams = props.input_params;\n    if (props.input_params.hasOwnProperty(\"elems\") && props.input_params.elems.includes(\"{\")) {\n      var parsed_elems = JSON.parse(props.input_params.elems);\n      newparams = _objectSpread(_objectSpread({}, newparams), {\n        elems: parsed_elems\n      });\n    }\n    // empty bbox has to be converted from string to empty array in parameters string\n    if (props.input_params.hasOwnProperty('bbox') && props.input_params.bbox === \"[]\") {\n      newparams = _objectSpread(_objectSpread({}, newparams), {\n        bbox: []\n      });\n    }\n    setInput_params_string(JSON.stringify(newparams));\n    setIsCsv(props.input_params.output === 'csv');\n    setHasParamsError(false);\n    // eslint-disable-next-line\n  }, [props.input_params]);\n\n  // check newly created params string for error\n  useEffect(function () {\n    if (input_params_string.length > 0) {\n      try {\n        var parsedString = JSON.parse(input_params_string);\n        props.setInput_params(parsedString);\n        setHasParamsError(false);\n      } catch (_unused) {\n        setHasParamsError(true);\n      }\n    }\n    // eslint-disable-next-line\n  }, [input_params_string]);\n\n  // update url of server whenever the wstype or specific server selections change\n  useEffect(function () {\n    setDatastate(_objectSpread(_objectSpread({}, datastate), {\n      results: \"\",\n      results_json: {},\n      dataimage: \"\"\n    }));\n    // eslint-disable-next-line\n  }, [props.wstype, props.server]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      mt: \"1em\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      children: [\"Parameters (JSON)\", input_params_string.length > 2 && /*#__PURE__*/_jsxDEV(Button, {\n        size: \"small\",\n        variant: \"go\",\n        onMouseDown: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(TextField, {\n      id: \"params\",\n      value: input_params_string,\n      margin: \"dense\",\n      variant: \"outlined\",\n      error: hasParamsError,\n      helperText: hasParamsError ? \"Error in Parameters encoding\" : \"\",\n      multiline: true,\n      fullWidth: true,\n      inputProps: {\n        sx: {\n          fontSize: \"90%\"\n        }\n      },\n      InputProps: {\n        endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"end\",\n          children: /*#__PURE__*/_jsxDEV(CopyToClipboard, {\n            cliptext: input_params_string,\n            color: \"blue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 15\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }, _this)\n      },\n      onChange: handleParamsChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, _this), datastate.results.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [datastate.results !== \"image\" && /*#__PURE__*/_jsxDEV(ResultsButtons, {\n        handleFormat: handleFormat,\n        showButtons: !isCsv,\n        selectedButton: selectedButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(Paper, {\n        variant: \"resultsPaper\",\n        children: [datastate.dataimage.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            component: \"pre\",\n            variant: \"pre\",\n            children: datastate.dataimage.includes(\"http\") ? \"Returned image\" : \"data (as image)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 17\n          }, _this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: datastate.dataimage,\n            alt: \"map\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 17\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 15\n        }, _this), !datastate.dataimage.includes(\"http\") && /*#__PURE__*/_jsxDEV(Typography, {\n          component: \"pre\",\n          variant: \"pre\",\n          children: datastate.results\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 15\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, _this);\n};\n_s(Output, \"+A+i1pG67yIfJEg7amZVR00U7tA=\");\n_c = Output;\nexport default Output;\n\n/* old format pre results style (wordBreak:\"normal\",overflowWrap:\"anywhere\",whiteSpace:datastate.format} */\nvar _c;\n$RefreshReg$(_c, \"Output\");","map":{"version":3,"names":["React","useState","useEffect","Typography","Button","TextField","Paper","Box","InputAdornment","ResultsButtons","CopyToClipboard","basicFormat","acisServers","Output","props","input_params_string","setInput_params_string","results","results_json","dataimage","datastate","setDatastate","hasParamsError","setHasParamsError","selectedButton","setSelectedButton","isCsv","setIsCsv","getAcisServerUrl","serverurl","wstype","rccindex","indexOf","server","slice","toLowerCase","generalArea","handleParamsChange","event","target","value","length","handleSubmit","url","input_params","output","fetch","method","body","headers","then","response","ok","json","text","data","JSON","stringify","catch","error","message","handleFormat","results_button","basicFormatResults","results_string","hasImage","hasOwnProperty","includes","console","log","newparams","elems","parsed_elems","parse","bbox","parsedString","setInput_params","mt","sx","fontSize","endAdornment"],"sources":["/Users/keith/progs/ACISQueryBuilder/src/Output.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Typography from '@mui/material/Typography'\nimport Button from '@mui/material/Button'\nimport TextField from '@mui/material/TextField'\nimport Paper from '@mui/material/Paper'\nimport Box from '@mui/material/Box'\nimport InputAdornment from '@mui/material/InputAdornment'\nimport ResultsButtons from './ResultsButtons'\nimport CopyToClipboard from './CopyToClipboard'\nimport { basicFormat } from './builders'\nimport { acisServers } from './acisServers'\n\nconst Output = (props) => {\n  const { input_params_string, setInput_params_string } = props\n  const [ datastate, setDatastate ] = useState({\n    results: \"\",\n    results_json: {},\n    //format: \"normal\", hard code all whitespace options to pre-wrap, instead of some being \"normal\"\n    dataimage: \"\",\n  })\n  const [ hasParamsError, setHasParamsError ] = useState(false)\n  const [ selectedButton, setSelectedButton ] = useState(\"JSON\")\n  const [ isCsv, setIsCsv ] = useState(false)\n\n  const getAcisServerUrl = () => {\n    let serverurl = acisServers[props.wstype]\n    const rccindex = serverurl.indexOf('data.rcc-acis')\n    if (rccindex !== -1 && props.server !== 'Any') {\n      serverurl = `${serverurl.slice(0,rccindex+4)}.${props.server.toLowerCase()}${serverurl.slice(rccindex+4)}`\n    }\n    return serverurl + props.generalArea\n  }\n\n  // user changed parameter string\n  const handleParamsChange = (event) => {\n    setInput_params_string(event.target.value)\n    if (datastate.results.length) {\n      setDatastate({...datastate, ...{results: ''}})\n    }\n  }  \n\n  // submit parameter string to server\n  const handleSubmit = () => {\n    setDatastate({...datastate, ...{\n      results: \"Submitting request ...\"\n    }})\n    const url = getAcisServerUrl()\n    if (props.input_params.output !== \"image\") {\n      fetch(url, {\n        method: 'POST',\n        body: input_params_string,\n        headers: {'Content-Type': 'application/json'}\n      })\n        .then(response => response.ok && !isCsv ? response.json() : response.text())\n        .then(data => {\n          setDatastate({...datastate, ...{\n            results: typeof data === 'object' ? JSON.stringify(data,null,0) : data,\n            results_json: data,\n            //format: typeof data === 'string' ? \"pre-wrap\" : \"normal\",\n            dataimage: \"\",\n          }})\n          setSelectedButton(typeof data === 'object' ? \"JSON\" : \"\")\n        })\n        .catch(error => setDatastate({...datastate, ...{\n          results: 'Error: ' + error.message,\n          dataimage: \"\"\n        }}))\n    } else {\n      setDatastate({...datastate, ...{\n        results: \"image\",\n        results_json: '',\n        //format: 'normal',\n        dataimage: url + '?params=' + input_params_string\n      }})\n      setSelectedButton(\"\")\n    }\n  }\n\n  // user clicked one of the format buttons\n  const handleFormat = (results_button) => {\n    setSelectedButton(results_button)\n    if (results_button === \"JSON\") {\n      setDatastate({...datastate, ...{\n        results: JSON.stringify(datastate.results_json,null,0), \n        //format:\"normal\", \n        dataimage: \"\",\n      }})\n    } else if (results_button === \"Basic format\") {\n      const basicFormatResults = basicFormat(datastate.results_json)\n      setDatastate({...datastate, ...{\n        results: basicFormatResults.results_string,\n        //format:\"pre-wrap\", \n        dataimage: basicFormatResults.dataimage.length > 0 ? basicFormatResults.dataimage : '',\n      }})\n    } else if (results_button === \"Full format\") {\n      const hasImage = datastate.results_json.hasOwnProperty(\"data\") && datastate.results_json.data.includes(\"image/png;base64\")\n      setDatastate({...datastate, ...{\n        results: JSON.stringify(datastate.results_json,null,2), \n        //format: \"pre-wrap\", \n        dataimage: hasImage ? datastate.results_json.data : ''\n      }})\n    } else {\n      console.log('Error: unknown format button')\n    }\n  }\n\n  // JSON parameters object needs to be stringified for display in text box\n  useEffect(() => {\n    //if (Object.keys(props.input_params).length === 0) {\n    setDatastate({...datastate, ...{results:''}})\n    //}\n    let newparams = props.input_params\n    if (props.input_params.hasOwnProperty(\"elems\") && props.input_params.elems.includes(\"{\")) {\n      const parsed_elems = JSON.parse(props.input_params.elems)\n      newparams = ({...newparams, ...{elems: parsed_elems}})\n    }\n    // empty bbox has to be converted from string to empty array in parameters string\n    if (props.input_params.hasOwnProperty('bbox') && props.input_params.bbox === \"[]\") {\n      newparams = ({...newparams, ...{bbox: []}})\n    }\n    setInput_params_string(JSON.stringify(newparams))\n    setIsCsv(props.input_params.output === 'csv')\n    setHasParamsError(false)\n    // eslint-disable-next-line\n  }, [props.input_params])\n\n  // check newly created params string for error\n  useEffect(() => {\n    if (input_params_string.length > 0) {\n      try {\n        const parsedString = JSON.parse(input_params_string)\n        props.setInput_params(parsedString)\n        setHasParamsError(false)\n      } catch {\n        setHasParamsError(true)\n      }\n    }\n    // eslint-disable-next-line\n  }, [input_params_string])\n\n  // update url of server whenever the wstype or specific server selections change\n  useEffect(() => {\n    setDatastate({...datastate, ...{\n      results: \"\",\n      results_json: {},\n      dataimage: \"\",\n    }})\n    // eslint-disable-next-line\n  }, [props.wstype, props.server])\n\n  return (\n    <Box sx={{mt:\"1em\"}}>\n      <Typography variant=\"h6\">\n        Parameters (JSON)\n        {input_params_string.length > 2 &&\n          <Button \n            size=\"small\"\n            variant=\"go\"\n            onMouseDown={handleSubmit}\n          >\n            Submit\n          </Button>\n        }\n      </Typography>\n      <TextField\n        id=\"params\"\n        value={input_params_string}\n        margin=\"dense\"\n        variant=\"outlined\"\n        error={hasParamsError}\n        helperText={hasParamsError ? \"Error in Parameters encoding\" : \"\"}\n        multiline={true}\n        fullWidth={true}\n        inputProps={{sx:{fontSize:\"90%\"}}}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <CopyToClipboard cliptext={input_params_string} color=\"blue\" />\n            </InputAdornment>\n          )\n        }}\n        onChange={handleParamsChange}\n      />\n      \n      {datastate.results.length > 0 && \n        <div>\n          {datastate.results !== \"image\" &&\n            <ResultsButtons\n              handleFormat={handleFormat}\n              showButtons={!isCsv}\n              selectedButton={selectedButton}\n            />\n          }\n          <Paper variant=\"resultsPaper\">\n            {datastate.dataimage.length > 0 &&\n              <div>\n                <Typography component=\"pre\" variant=\"pre\">\n                  {datastate.dataimage.includes(\"http\") ? \"Returned image\" : \"data (as image)\"}\n                </Typography>\n                <img src={datastate.dataimage} alt=\"map\" />\n              </div>\n            }\n            {!datastate.dataimage.includes(\"http\") &&\n              <Typography component=\"pre\" variant=\"pre\">\n                {datastate.results}\n              </Typography>\n            }\n          </Paper>\n        </div>\n      }\n    </Box>\n  )\n}\n\nexport default Output  \n\n/* old format pre results style (wordBreak:\"normal\",overflowWrap:\"anywhere\",whiteSpace:datastate.format} */"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}