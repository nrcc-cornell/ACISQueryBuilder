{"ast":null,"code":"import _slicedToArray from \"/Users/kle1/git/ACISQueryBuilder/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nvar CheckSearchParams = function CheckSearchParams(props) {\n  _s();\n  var _useSearchParams = useSearchParams(),\n    _useSearchParams2 = _slicedToArray(_useSearchParams, 1),\n    searchParams = _useSearchParams2[0];\n\n  // eliminate need to require CamelCase service specification in search string\n  var services = {\n    \"stnmeta\": \"StnMeta\",\n    \"stndata\": \"StnData\",\n    \"multistndata\": \"MultiStnData\",\n    \"griddata\": \"GridData\",\n    \"griddata2\": \"GridData2\",\n    \"stnhourly\": \"StnHourly\",\n    \"general\": \"General\"\n  };\n  var handleSearchChange = function handleSearchChange(srchstr) {\n    if (srchstr.has(\"service\") && srchstr.has(\"params\")) {\n      var service = srchstr.get(\"service\").toLowerCase();\n      if (services.hasOwnProperty(service)) {\n        var wstype = services[service];\n        var params_string = decodeURIComponent(srchstr.get(\"params\"));\n        var generalArea = wstype === \"General\" && srchstr.has(\"area\") ? srchstr.get(\"area\") : \"\";\n        props.setWstype(wstype);\n        props.setGeneralArea(generalArea);\n        props.setInput_params_string(params_string);\n        try {\n          var input_params = JSON.parse(params_string);\n          props.setInput_params(input_params);\n          props.setResetElemsBuilder(true);\n        } catch (_unused) {\n          console.log('Invalid JSON in url');\n        }\n      }\n    }\n  };\n  useEffect(function () {\n    handleSearchChange(searchParams);\n    // eslint-disable-next-line\n  }, [searchParams]);\n};\n_s(CheckSearchParams, \"E9Ij1QPQ/kDTflj1GjuJ6NL/Gdw=\", false, function () {\n  return [useSearchParams];\n});\n_c = CheckSearchParams;\nexport default CheckSearchParams;\nvar _c;\n$RefreshReg$(_c, \"CheckSearchParams\");","map":{"version":3,"names":["useEffect","useSearchParams","CheckSearchParams","props","searchParams","services","handleSearchChange","srchstr","has","service","get","toLowerCase","hasOwnProperty","wstype","params_string","decodeURIComponent","generalArea","setWstype","setGeneralArea","setInput_params_string","input_params","JSON","parse","setInput_params","setResetElemsBuilder","console","log"],"sources":["/Users/kle1/git/ACISQueryBuilder/src/CheckSearchParams.jsx"],"sourcesContent":["import { useEffect} from 'react'\nimport { useSearchParams } from 'react-router-dom'\n\nconst CheckSearchParams = (props) => {\n    const [ searchParams ] = useSearchParams()\n\n    // eliminate need to require CamelCase service specification in search string\n    const services = {\n        \"stnmeta\": \"StnMeta\",\n        \"stndata\": \"StnData\",\n        \"multistndata\": \"MultiStnData\",\n        \"griddata\": \"GridData\",\n        \"griddata2\": \"GridData2\",\n        \"stnhourly\": \"StnHourly\",\n        \"general\": \"General\",\n    }\n\n    const handleSearchChange = (srchstr) => {\n        if (srchstr.has(\"service\") && srchstr.has(\"params\")) {\n            const service = srchstr.get(\"service\").toLowerCase()\n            if (services.hasOwnProperty(service)) {\n                const wstype = services[service]\n                const params_string = decodeURIComponent(srchstr.get(\"params\"))\n                const generalArea = (wstype === \"General\" && srchstr.has(\"area\")) ? srchstr.get(\"area\") : \"\"\n                props.setWstype(wstype)\n                props.setGeneralArea(generalArea)\n                props.setInput_params_string(params_string)\n                try {\n                    const input_params = JSON.parse(params_string)\n                    props.setInput_params(input_params)\n                    props.setResetElemsBuilder(true)\n                } catch {\n                    console.log('Invalid JSON in url')\n                }\n            }\n        }\n     }\n\n    useEffect(() => {\n      handleSearchChange(searchParams)\n      // eslint-disable-next-line\n    }, [searchParams])\n}\n\nexport default CheckSearchParams"],"mappings":";;AAAA,SAASA,SAAS,QAAO,OAAO;AAChC,SAASC,eAAe,QAAQ,kBAAkB;AAElD,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiB,CAAIC,KAAK,EAAK;EAAA;EACjC,uBAAyBF,eAAe,EAAE;IAAA;IAAlCG,YAAY;;EAEpB;EACA,IAAMC,QAAQ,GAAG;IACb,SAAS,EAAE,SAAS;IACpB,SAAS,EAAE,SAAS;IACpB,cAAc,EAAE,cAAc;IAC9B,UAAU,EAAE,UAAU;IACtB,WAAW,EAAE,WAAW;IACxB,WAAW,EAAE,WAAW;IACxB,SAAS,EAAE;EACf,CAAC;EAED,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkB,CAAIC,OAAO,EAAK;IACpC,IAAIA,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC,IAAID,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC,EAAE;MACjD,IAAMC,OAAO,GAAGF,OAAO,CAACG,GAAG,CAAC,SAAS,CAAC,CAACC,WAAW,EAAE;MACpD,IAAIN,QAAQ,CAACO,cAAc,CAACH,OAAO,CAAC,EAAE;QAClC,IAAMI,MAAM,GAAGR,QAAQ,CAACI,OAAO,CAAC;QAChC,IAAMK,aAAa,GAAGC,kBAAkB,CAACR,OAAO,CAACG,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC/D,IAAMM,WAAW,GAAIH,MAAM,KAAK,SAAS,IAAIN,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC,GAAID,OAAO,CAACG,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE;QAC5FP,KAAK,CAACc,SAAS,CAACJ,MAAM,CAAC;QACvBV,KAAK,CAACe,cAAc,CAACF,WAAW,CAAC;QACjCb,KAAK,CAACgB,sBAAsB,CAACL,aAAa,CAAC;QAC3C,IAAI;UACA,IAAMM,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACR,aAAa,CAAC;UAC9CX,KAAK,CAACoB,eAAe,CAACH,YAAY,CAAC;UACnCjB,KAAK,CAACqB,oBAAoB,CAAC,IAAI,CAAC;QACpC,CAAC,CAAC,gBAAM;UACJC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;QACtC;MACJ;IACJ;EACH,CAAC;EAEF1B,SAAS,CAAC,YAAM;IACdM,kBAAkB,CAACF,YAAY,CAAC;IAChC;EACF,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;AACtB,CAAC;AAAA,GAvCKF,iBAAiB;EAAA,QACMD,eAAe;AAAA;AAAA,KADtCC,iBAAiB;AAyCvB,eAAeA,iBAAiB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}