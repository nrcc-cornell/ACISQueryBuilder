{"ast":null,"code":"import _classCallCheck from \"/Users/kle1/progs/React/QueryBuilder3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/kle1/progs/React/QueryBuilder3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/kle1/progs/React/QueryBuilder3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/kle1/progs/React/QueryBuilder3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _jsxFileName = \"/Users/kle1/progs/React/QueryBuilder3/src/ResultsButtons.jsx\";\nimport React, { Component } from 'react';\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport ToggleButton from '@mui/lab/ToggleButton';\nimport ToggleButtonGroup from '@mui/lab/ToggleButtonGroup';\nimport { withStyles } from '@mui/material/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar styles = {\n  // ToggleButton\n  root: {\n    background: \"white\",\n    color: \"darkblue\",\n    textTransform: \"none\",\n    borderRight: \"1pt solid lightgray\"\n  },\n  selected: {\n    background: \"blue !important\",\n    color: \"white !important\"\n  },\n  // Paper\n  paperRoot: {\n    margin: \"1em 0\"\n  }\n};\nvar buttonLabels = ['JSON', 'Basic format', 'Full format'];\nvar ResultsButtons = /*#__PURE__*/function (_Component) {\n  _inherits(ResultsButtons, _Component);\n  var _super = _createSuper(ResultsButtons);\n  function ResultsButtons(props) {\n    var _this;\n    _classCallCheck(this, ResultsButtons);\n    _this = _super.call(this, props);\n    _this.handleChange = function (event) {\n      var value = event.currentTarget.value;\n      _this.setState({\n        selectedButton: value\n      });\n      _this.props.handleFormat(value);\n    };\n    _this.state = {\n      selectedButton: \"JSON\"\n    };\n    return _this;\n  }\n  _createClass(ResultsButtons, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        selectedButton: this.props.selectedButton\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props !== prevProps) {\n        this.setState({\n          selectedButton: this.props.selectedButton\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var classes = this.props.classes;\n      return /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 0,\n        classes: {\n          root: classes.paperRoot\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 16,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              children: \"Results:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: this.props.showButtons && /*#__PURE__*/_jsxDEV(ToggleButtonGroup, {\n              value: this.state.selectedButton,\n              exclusive: true,\n              onChange: this.handleChange,\n              children: buttonLabels.map(function (item) {\n                return /*#__PURE__*/_jsxDEV(ToggleButton, {\n                  value: item,\n                  classes: {\n                    root: classes.root,\n                    selected: classes.selected\n                  },\n                  children: item\n                }, item, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 21\n                }, _this2);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n  return ResultsButtons;\n}(Component);\nexport default withStyles(styles)(ResultsButtons);","map":{"version":3,"names":["React","Component","Paper","Grid","Typography","ToggleButton","ToggleButtonGroup","withStyles","styles","root","background","color","textTransform","borderRight","selected","paperRoot","margin","buttonLabels","ResultsButtons","props","handleChange","event","value","currentTarget","setState","selectedButton","handleFormat","state","prevProps","classes","showButtons","map","item"],"sources":["/Users/kle1/progs/React/QueryBuilder3/src/ResultsButtons.jsx"],"sourcesContent":["import React, { Component } from 'react'\nimport Paper from '@mui/material/Paper'\nimport Grid from '@mui/material/Grid'\nimport Typography from '@mui/material/Typography'\nimport ToggleButton from '@mui/lab/ToggleButton'\nimport ToggleButtonGroup from '@mui/lab/ToggleButtonGroup'\nimport { withStyles } from '@mui/material/styles'\n\nconst styles = {\n   // ToggleButton\n   root: {\n    background: \"white\",\n    color: \"darkblue\",\n    textTransform: \"none\",\n    borderRight: \"1pt solid lightgray\"\n  },\n  selected: {\n    background: \"blue !important\",\n    color: \"white !important\"\n  },\n  // Paper\n  paperRoot: {\n    margin: \"1em 0\",\n  }\n}\n\nconst buttonLabels = ['JSON', 'Basic format', 'Full format']\n\nclass ResultsButtons extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      selectedButton: \"JSON\",\n    }\n  }\n\n  handleChange = (event) => {\n    const value = event.currentTarget.value\n    this.setState({ \n      selectedButton: value\n    })\n    this.props.handleFormat(value)\n  }\n\n  componentDidMount() {\n    this.setState({selectedButton: this.props.selectedButton})\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props !== prevProps) {\n      this.setState({\n        selectedButton: this.props.selectedButton\n      })\n    }\n  }\n\n  render() {\n    const {classes} = this.props\n    return (\n      <Paper elevation={0} classes={{root:classes.paperRoot}}>\n        <Grid container spacing={16}>\n          <Grid item>\n            <Typography variant=\"h6\">\n              Results:\n            </Typography>\n          </Grid>\n          <Grid item>\n            {this.props.showButtons &&\n              <ToggleButtonGroup value={this.state.selectedButton} exclusive onChange={this.handleChange}>\n                  {buttonLabels.map((item) => (\n                    <ToggleButton \n                      key={item} \n                      value={item} \n                      classes={{root:classes.root, selected:classes.selected}}\n                    >\n                      {item}\n                    </ToggleButton>                  \n                  ))}\n              </ToggleButtonGroup>\n            }\n          </Grid>\n        </Grid>\n      </Paper>\n    )\n  }\n}\n\nexport default withStyles(styles)(ResultsButtons)"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}